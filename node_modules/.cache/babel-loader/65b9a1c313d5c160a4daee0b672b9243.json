{"ast":null,"code":"var _jsxFileName = \"/Users/nnannaforever/calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport DigitButton from './DigitButton';\nimport OperationButton from './OpertationButton';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERTATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n};\n\nfunction reducer(state, _ref) {\n  let {\n    type,\n    payload\n  } = _ref;\n\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      // if 0 or . is clicked return the current state thus 0 or . should not appear more than once for currentoperand\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state;\n      }\n\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state;\n      }\n\n      return { ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`\n      };\n\n    case ACTIONS.CHOOSE_OPERTATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      } //overwrites the operation - meaning operation button can be replaced after clicked\n\n\n      if (state.currentOperand == null) {\n        return { ...state,\n          operation: payload.operation\n        };\n      } // below basically the currentOperand becomes our previous and the operation is saved \n\n\n      if (state.previousOperand == null) {\n        return { ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null\n        };\n      } //taking current and previous op calculating the operation fromt the evaluate then setting result into the previous op state\n\n\n      return { ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null\n      };\n    //Actions.clear returns an empty state clearing previous state when AC is clicked \n\n    case ACTIONS.CLEAR:\n      return {};\n  }\n}\n\nfunction evaluate(_ref2) {\n  let {\n    currentOperand,\n    previousOperand,\n    operation\n  } = _ref2;\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\";\n  let computation = \"\"; //below carries out the calculations \n\n  switch (operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    // to stop calculation going into next case statement\n\n    case \"-\":\n      computation = prev - current;\n      break;\n\n    case \"*\":\n      computation = prev * current;\n      break;\n\n    case \"รท\":\n      computation = prev / current;\n      break;\n  }\n\n  return computation.toString();\n}\n\nfunction App() {\n  _s();\n\n  const [{\n    currentOperand,\n    previousOperand,\n    operation\n  }, dispatch] = useReducer(reducer, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previous-operand\",\n        children: [previousOperand, \" \", operation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-operand\",\n        children: currentOperand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"span-two\",\n      onClick: () => dispatch({\n        type: ACTIONS.CLEAR\n      }),\n      children: \"AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"DEL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"\\xF7\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"1\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"2\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"3\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"*\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"4\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"5\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"6\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"+\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"7\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"8\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"9\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"-\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \".\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"0\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"span-two\",\n      children: \"=\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"U3IK2u6L5w8LChD4hEs3C1yVO5M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useReducer","DigitButton","OperationButton","ACTIONS","ADD_DIGIT","CHOOSE_OPERTATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","type","payload","digit","currentOperand","includes","previousOperand","operation","evaluate","prev","parseFloat","current","isNaN","computation","toString","App","dispatch"],"sources":["/Users/nnannaforever/calculator/src/App.js"],"sourcesContent":["import { useReducer } from 'react';\nimport DigitButton from './DigitButton';\nimport OperationButton from './OpertationButton';\nimport './App.css';\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERTATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\nfunction reducer(state, { type, payload }) {\n  switch(type) {\n    case ACTIONS.ADD_DIGIT:\n      // if 0 or . is clicked return the current state thus 0 or . should not appear more than once for currentoperand\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state\n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state\n      } \n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\" }${payload.digit}`\n      }\n\n      case ACTIONS.CHOOSE_OPERTATION:\n      if(state.currentOperand == null && state.previousOperand == null) {\n           return state\n      } \n      \n      //overwrites the operation - meaning operation button can be replaced after clicked\n      if(state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        }\n      }\n\n      // below basically the currentOperand becomes our previous and the operation is saved \n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        }\n      }      \n\n      //taking current and previous op calculating the operation fromt the evaluate then setting result into the previous op state\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null\n      }\n      //Actions.clear returns an empty state clearing previous state when AC is clicked \n      case ACTIONS.CLEAR:\n        return {}\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation}) {\n  const prev = parseFloat(previousOperand)\n  const current = parseFloat(currentOperand)\n  if (isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\"\n  //below carries out the calculations \n  switch (operation) {\n    case \"+\":\n      computation = prev + current\n      break // to stop calculation going into next case statement\n    case \"-\":\n      computation = prev - current\n      break\n    case \"*\":\n      computation = prev * current\n      break\n    case \"รท\":\n      computation = prev / current\n      break\n  }\n\n  return computation.toString()\n}\n\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer, \n    {}\n    )\n\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className='output'>\n        <div className='previous-operand'>{previousOperand} {operation}</div>\n        <div className='current-operand'>{currentOperand}</div>\n      </div>\n      <button className='span-two' onClick={() => dispatch({type: ACTIONS.CLEAR })}>AC</button>\n      <button >DEL</button>\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button className='span-two'>=</button>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}