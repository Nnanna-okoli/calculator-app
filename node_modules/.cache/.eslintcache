[{"/Users/nnannaforever/calculator/src/index.js":"1","/Users/nnannaforever/calculator/src/App.js":"2","/Users/nnannaforever/calculator/src/DigitButton.js":"3","/Users/nnannaforever/calculator/src/OpertationButton.js":"4"},{"size":468,"mtime":1652312407793,"results":"5","hashOfConfig":"6"},{"size":5672,"mtime":1652353987836,"results":"7","hashOfConfig":"6"},{"size":380,"mtime":1652319489313,"results":"8","hashOfConfig":"6"},{"size":404,"mtime":1652320165032,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"qh19c6",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nnannaforever/calculator/src/index.js",[],[],[],"/Users/nnannaforever/calculator/src/App.js",["24","25"],[],"import { useReducer } from 'react';\nimport DigitButton from './DigitButton';\nimport OperationButton from './OpertationButton';\nimport './App.css';\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERTATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate',\n}\n\nfunction reducer(state, { type, payload }) {\n  switch(type) {\n    case ACTIONS.ADD_DIGIT:\n      if(state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        }\n      }\n      // if 0 or . is clicked return the current state thus 0 or . should not appear more than once for currentoperand\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state\n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state\n      } \n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\" }${payload.digit}`\n      }\n\n      case ACTIONS.CHOOSE_OPERTATION:\n      if(state.currentOperand == null && state.previousOperand == null) {\n           return state\n      } \n      \n      //overwrites the operation - meaning operation button can be replaced after clicked\n      if(state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        }\n      }\n\n      // below basically the currentOperand becomes our previous and the operation is saved \n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        }\n      }      \n\n      //taking current and previous op calculating the operation fromt the evaluate then setting result into the previous op state\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null\n      }\n      //Actions.clear returns an empty state clearing previous state when AC is clicked \n      case ACTIONS.CLEAR:\n        return {}\n      case ACTIONS.DELETE_DIGIT:\n        if (state.overwrite) {\n          return {\n            ...state,\n            overwrite: false,\n            currentOperand: null\n          }\n        } \n        if (state.currentOperand == null ) return state\n        if (state.currentOperand.length === 1 ) {\n          return { ...state, currentOperand: null }\n        }\n        return {\n          ...state,\n          currentOperand: state.currentOperand.slice(0, -1) //removes last digit from current operand\n        }\n      case ACTIONS.EVALUATE:\n        if (\n          state.operation == null || \n          state.currentOperand == null || \n          state.previousOperand == null\n          ) {\n            return state\n          }\n\n          return {\n            ...state,\n            overwrite: true,\n            previousOperand: null,\n            operation: null,\n            currentOperand: evaluate(state)\n          }\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation}) {\n  const prev = parseFloat(previousOperand)\n  const current = parseFloat(currentOperand)\n  if (isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\"\n  //below carries out the calculations \n  switch (operation) {\n    case \"+\":\n      computation = prev + current\n      break // to stop calculation going into next case statement\n    case \"-\":\n      computation = prev - current\n      break\n    case \"*\":\n      computation = prev * current\n      break\n    case \"รท\":\n      computation = prev / current\n      break\n  }\n\n  return computation.toString()\n}\n\n//seperates interger portion and non integer portion meaning no formatting occurs once . has been clicked\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n}) \n\n//this will format the integers \nfunction formatOperand(operand) {\n  if(operand == null) return \n  const [integer, decimal] = operand.split('.')\n  if(decimal == null) return INTEGER_FORMATTER.format(integer)\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}` //no formatting on the decimal \n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer, \n    {}\n    )\n\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className='output'>\n        <div className='previous-operand'>{formatOperand(previousOperand)} {operation}</div>\n        <div className='current-operand'>{formatOperand(currentOperand)}</div>\n      </div>\n      <button className='span-two' onClick={() => dispatch({type: ACTIONS.CLEAR })}>AC</button>\n      <button onClick={() => dispatch({type: ACTIONS.DELETE_DIGIT })}>DEL</button>\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button className='span-two'  onClick={() => dispatch({type: ACTIONS.EVALUATE })}>=</button>\n    </div>\n  )\n}\n\nexport default App\n","/Users/nnannaforever/calculator/src/DigitButton.js",[],[],"/Users/nnannaforever/calculator/src/OpertationButton.js",[],[],{"ruleId":"26","severity":1,"message":"27","line":15,"column":3,"nodeType":"28","messageId":"29","endLine":102,"endColumn":4},{"ruleId":"26","severity":1,"message":"27","line":111,"column":3,"nodeType":"28","messageId":"29","endLine":124,"endColumn":4},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase"]